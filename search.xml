<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo使用markdown语法的样例</title>
    <url>/2023/02/06/hexo-markdown-test/</url>
    <content><![CDATA[<h1 id="Hexo使用markdown语法的样例"><a href="#Hexo使用markdown语法的样例" class="headerlink" title="Hexo使用markdown语法的样例"></a>Hexo使用markdown语法的样例</h1><blockquote>
<p>简介<br>在Hexo平台写博客使用markdown语法的一下样例</p>
</blockquote>
<h2 id="1-字体"><a href="#1-字体" class="headerlink" title="1.字体"></a>1.字体</h2><p><em>斜体文字</em><br><em>斜体文字</em></p>
<p><strong>粗体文字</strong><br><strong>粗体文字</strong></p>
<p><em><strong>粗斜体文字</strong></em><br><em><strong>粗斜体文字</strong></em></p>
<p>baidu.com<br>sina.com<br><del>删除线tencent.com</del><br><del>删除线</del></p>
<p><u>带下划线文本</u></p>
<p>29^th^ =&gt; <code>29&lt;sup&gt;th&lt;/sup&gt;</code><br>H<del>2</del>0 =&gt; <code>H&lt;sub&gt;2&lt;/sub&gt;O</code><br>==marked== =&gt; <code>&lt;mark&gt;inserted&lt;/mark&gt;</code><br>++inserted++ =&gt; <code>&lt;ins&gt;inserted&lt;/ins&gt;</code>  </p>
<p>使用 Markdown<a href="Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote<a href="%E5%BC%80%E6%BA%90%E7%AC%94%E8%AE%B0%E5%B9%B3%E5%8F%B0%EF%BC%8C%E6%94%AF%E6%8C%81Markdown%E5%92%8C%E7%AC%94%E8%AE%B0%E7%9B%B4%E6%8E%A5%E5%8F%91%E4%B8%BA%E5%8D%9A%E6%96%87">^Le</a> 编辑器进行书写。</p>
<p>[^2]:HyperText Markup Language 超文本标记语言</p>
<h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h2><p>带链接的文字<a href="https://news.sina.com.cn/">新浪新闻</a></p>
<p>直接链接<a href="https://news.sina.com.cn/">https://news.sina.com.cn/</a></p>
<p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用1作为网址变量<a href="http://www.baidu.com/">baidu</a><br>这个链接用markdown作为网址变量<a href="http://www.markdown.com/">Markdown</a><br>然后文档的结尾为变量赋值(网址)</p>
<h2 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3.代码块"></a>3.代码块</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">print('Markdown')
def test():
    print('Markdown test!')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Markdown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<p>文中使用<code>print()</code>函数</p>
<p>codeblock使用参数<code>[title] [lang:language] [url] [link text] [additional options]</code></p>
<pre class="line-numbers language-none"><code class="language-none">code snippet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>rectangle setX<span class="token punctuation">:</span> <span class="token number">10</span> y<span class="token punctuation">:</span> <span class="token number">10</span> width<span class="token punctuation">:</span> <span class="token number">20</span> height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><div class="caption"><span>Array.map</span></div><code class="language-none">array.map(callback[, thisArg])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<pre class="line-numbers language-none"><div class="caption"><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></div><code class="language-none">_.compact([0, 1, false, 2, '', 3]);
=&gt; [1, 2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h3 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h3><ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h2 id="6-区块"><a href="#6-区块" class="headerlink" title="6.区块"></a>6.区块</h2><blockquote>
<p>markdown<br>基础<br>区块引用  </p>
</blockquote>
<blockquote>
<p>markdown  </p>
<blockquote>
<p>基础  </p>
<blockquote>
<p>区块引用  </p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="7-tag-note"><a href="#7-tag-note" class="headerlink" title="7.tag note"></a>7.tag note</h2><div class="note "><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>(without define class style)</p>
</div>

<div class="note primary"><h4 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note info"><h4 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note success"><h4 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note warning"><h4 id="Warning-Header"><a href="#Warning-Header" class="headerlink" title="Warning Header"></a>Warning Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note danger"><h4 id="Danger-Header"><a href="#Danger-Header" class="headerlink" title="Danger Header"></a>Danger Header</h4><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<div class="note info no-icon"><h4 id="No-icon-note"><a href="#No-icon-note" class="headerlink" title="No icon note"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>

<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
  <h4 id="Details-and-summary-No-icon-Note-with-summary-note-info-no-icon-This-is-a-summary"><a href="#Details-and-summary-No-icon-Note-with-summary-note-info-no-icon-This-is-a-summary" class="headerlink" title="Details and summary (No icon) Note with summary: note info no-icon This is a summary"></a>Details and summary (No icon) Note with summary: <code>note info no-icon This is a summary</code></h4>
  </details>

<div class="note success"><h4 id="Codeblock-in-note-code-block-in-note-tag-code-block-in-note-tag-code-block-in-note-tag"><a href="#Codeblock-in-note-code-block-in-note-tag-code-block-in-note-tag-code-block-in-note-tag" class="headerlink" title="Codeblock in note code block in note tag code block in note tag code block in note tag"></a>Codeblock in note <code>code block in note tag code block in note tag code block in note tag</code></h4></div>

<h4 id="Table-in-Note"><a href="#Table-in-Note" class="headerlink" title="Table in Note"></a>Table in Note</h4><div class="note default"><table>
<thead>
<tr>
<th>1</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>8</td>
</tr>
</tbody></table>
</div>





<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><table>
<thead>
<tr>
<th>表头1</th>
<th>表头2</th>
</tr>
</thead>
<tbody><tr>
<td>单元格11</td>
<td>单元格12</td>
</tr>
<tr>
<td>单元格21</td>
<td>单元格22</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="center">居中对齐</th>
<th align="right">右对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格11</td>
<td align="center">单元格12</td>
<td align="right">单元格13</td>
</tr>
<tr>
<td align="left">单元格21</td>
<td align="center">单元格22</td>
<td align="right">单元格23</td>
</tr>
</tbody></table>
<hr>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>分数</th>
</tr>
</thead>
<tbody><tr>
<td>小明</td>
<td>男</td>
<td>75</td>
</tr>
<tr>
<td>小红</td>
<td>女</td>
<td>79</td>
</tr>
<tr>
<td>小陆</td>
<td>男</td>
<td>92</td>
</tr>
</tbody></table>
<h2 id="9-checkbox"><a href="#9-checkbox" class="headerlink" title="9.checkbox"></a>9.checkbox</h2><ul>
<li><input checked="" disabled="" type="checkbox"> item 1<ul>
<li><input checked="" disabled="" type="checkbox"> item 1-1</li>
<li><input disabled="" type="checkbox"> item 1-2</li>
<li><input disabled="" type="checkbox"> item 1-3</li>
<li><input disabled="" type="checkbox"> item 1-4</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> item 2<ul>
<li><input disabled="" type="checkbox"> item 2-1</li>
<li><input disabled="" type="checkbox"> item 2-2</li>
<li><input disabled="" type="checkbox"> item 2-3</li>
<li><input disabled="" type="checkbox"> item 2-4</li>
</ul>
</li>
</ul>
<h2 id="10-emoji"><a href="#10-emoji" class="headerlink" title="10.emoji"></a>10.emoji</h2><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="11-按钮"><a href="#11-按钮" class="headerlink" title="11.按钮"></a>11.按钮</h2><p>Button with text &amp; title</p>
<a class="theme-btn" href="#">Text</a>
<a class="theme-btn" href="#">Text</a>
<a class="theme-btn" href="#" title="Title">Text &amp; Title</a>

<p>Button with icon</p>
<a class="theme-btn" href="#"><i class="fa fa-home fa-5x"></i></a>
<a class="theme-btn" href="#"><i class="fa fa-home fa-4x"></i></a>
<a class="theme-btn" href="#"><i class="fa fa-home fa-3x"></i></a>
<a class="theme-btn" href="#"><i class="fa fa-home fa-2x"></i></a>
<a class="theme-btn" href="#"><i class="fa fa-home fa-lg"></i></a>
<a class="theme-btn" href="#"><i class="fa fa-home"></i></a>

<p>Button with text &amp; icon</p>
<a class="theme-btn" href="#"><i class="fa fa-home"></i>Text &amp; Icon (buggy)</a>
<a class="theme-btn" href="#"><i class="fa fa-home fa-fw"></i>Text &amp; Icon (fixed width)</a>

<p>Button inside text<br>Lorem <a class="theme-btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>Lorem</a> ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<h2 id="12-HTML元素"><a href="#12-HTML元素" class="headerlink" title="12.HTML元素"></a>12.HTML元素</h2><div class="footer">
   © 2004 Foo Corporation
</div>


<table>
    <tbody><tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</tbody></table>


<h2 id="13-公式"><a href="#13-公式" class="headerlink" title="13.公式"></a>13.公式</h2><p>$$<br>E=mc^2<br>$$</p>
<p>$ \Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,. $</p>
<p>$$\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.$$</p>
<p>$$<br>\left{<br>\begin{array}{c}<br>    a_1x+b_1y+c_1z=d_1 \<br>    a_2x+b_2y+c_2z=d_2 \<br>    a_3x+b_3y+c_3z=d_3<br>\end{array}<br>\right.<br>$$</p>
<h2 id="14-图片"><a href="#14-图片" class="headerlink" title="14.图片"></a>14.图片</h2><p><img src="https://pic4.zhimg.com/80/v2-a47051e92cf74930bedd7469978e6c08_hd.png" alt="知乎图标"></p>
<hr>
<p><img src="https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png" alt="百度图标" title="百度透明图标"></p>
<hr>
<p><img src="/images/image111.png" alt="本地头像"></p>
<hr>
<p><img src="/images/loading1.gif" alt="加载动图"></p>
<h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><h2 id="插入PDF"><a href="#插入PDF" class="headerlink" title="插入PDF"></a>插入PDF</h2>

	<div class="row">
    <embed src="/pdf/test1.pdf" width="100%" height="550" type="application/pdf">
	</div>







	<div class="row">
    <embed src="https://arxiv.org/pdf/2103.00784v1.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的Signal使用</title>
    <url>/2023/02/07/linux-c-signal/</url>
    <content><![CDATA[<h1 id="C-Signal使用"><a href="#C-Signal使用" class="headerlink" title="C++ Signal使用"></a>C++ Signal使用</h1><blockquote>
<p>简介<br>信号机制是进程之间相互传递消息的一种方法，信号全称为软中断信号，也有人称软中断。从它的命名可以看出，它的实质和使用很像中断，所有，信号可以说是进程控制的一部分。信号signal处理是Linux程序的一个特色，用信号处理来模拟操作系统的中断功能。C++使用处理信号的标准库 <code>#include &lt;csignal&gt;</code> 或 <code>#include &lt;signal.h&gt;</code></p>
</blockquote>
<h2 id="1-什么是信号"><a href="#1-什么是信号" class="headerlink" title="1.什么是信号"></a>1.什么是信号</h2><ul>
<li><p><code>#include &lt;csignal&gt;</code> 或 <code>#include &lt;signal.h&gt;</code>是处理信号的C标准库，该库主要包含了<code>signal()</code>与<code>raise()</code>两个功能函数。  </p>
<ol>
<li>函数signal用于捕获信号，可指定信号处理的方式。  </li>
<li>函数raise产生一个信号，并向当前正在执行的程序发送该信号。  </li>
</ol>
</li>
<li><p>信号<code>signal</code>可以理解为由操作系统传给程序（进程）的事件，只是用来通知程序发生了什么事件，并不会传递给该进程任何数据。</p>
</li>
<li><p>信号是一种中断，因为它可以改变程序的流程。当信号传递给进程时，进程将停下其正在执行的操作，并去处理或忽略该信号异步事件。</p>
</li>
</ul>
<div class="note "><p><em>异步事件</em> - 查看信号的方式是一种处理异步事件的机制。</p>
<ul>
<li>当程序通过signal函数捕获信号后，若signal函数第二参数为函数指针，则调用signal函数的程序会阻塞（暂停在signal函数这句），直至异步线程（进入函数指针）return。程序将从暂停点恢复执行。</li>
<li>此外，进程之间可以互相通过系统调用kill发送软中断信号。<br>(without define class style)</li>
</ul>
</div>

<ul>
<li>C++头文件<code>signum.h</code>和<code>signum-generic.h</code>中定义了以下信号<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">/* We define here all the signal names listed in POSIX (1003.1-2008);
   as of 1003.1-2013, no additional signals have been added by POSIX.
   We also define here signal names that historically exist in every
   real-world POSIX variant (e.g. SIGWINCH).

   Signals in the 1-15 range are defined with their historical numbers.
   For other signals, we use the BSD numbers.
   There are two unallocated signal numbers in the 1-31 range: 7 and 29.
   Signal number 0 is reserved for use as kill(pid, 0), to test whether
   a process exists without sending it a signal.  */

/* ISO C99 signals.  */
#define	SIGINT		2	/* Interactive attention signal.  */
#define	SIGILL		4	/* Illegal instruction.  */
#define	SIGABRT		6	/* Abnormal termination.  */
#define	SIGFPE		8	/* Erroneous arithmetic operation.  */
#define	SIGSEGV		11	/* Invalid access to storage.  */
#define	SIGTERM		15	/* Termination request.  */

/* Historical signals specified by POSIX. */
#define	SIGHUP		1	/* Hangup.  */
#define	SIGQUIT		3	/* Quit.  */
#define	SIGTRAP		5	/* Trace/breakpoint trap.  */
#define	SIGKILL		9	/* Killed.  */
#define SIGBUS		10	/* Bus error.  */
#define	SIGSYS		12	/* Bad system call.  */
#define	SIGPIPE		13	/* Broken pipe.  */
#define	SIGALRM		14	/* Alarm clock.  */

/* New(er) POSIX signals (1003.1-2008, 1003.1-2013).  */
#define	SIGURG		16	/* Urgent data is available at a socket.  */
#define	SIGSTOP		17	/* Stop, unblockable.  */
#define	SIGTSTP		18	/* Keyboard stop.  */
#define	SIGCONT		19	/* Continue.  */
#define	SIGCHLD		20	/* Child terminated or stopped.  */
#define	SIGTTIN		21	/* Background read from control terminal.  */
#define	SIGTTOU		22	/* Background write to control terminal.  */
#define	SIGPOLL		23	/* Pollable event occurred (System V).  */
#define	SIGXCPU		24	/* CPU time limit exceeded.  */
#define	SIGXFSZ		25	/* File size limit exceeded.  */
#define	SIGVTALRM	26	/* Virtual timer expired.  */
#define	SIGPROF		27	/* Profiling timer expired.  */
#define	SIGUSR1		30	/* User-defined signal 1.  */
#define	SIGUSR2		31	/* User-defined signal 2.  */

/* Nonstandard signals found in all modern POSIX systems
   (including both BSD and Linux).  */
#define	SIGWINCH	28	/* Window size change (4.3 BSD, Sun).  */

/* Archaic names for compatibility.  */
#define	SIGIO		SIGPOLL	/* I/O now possible (4.2 BSD).  */
#define	SIGIOT		SIGABRT	/* IOT instruction, abort() on a PDP-11.  */
#define	SIGCLD		SIGCHLD	/* Old System V name */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="2-函数signal"><a href="#2-函数signal" class="headerlink" title="2.函数signal"></a>2.函数signal</h2><p>函数signal 用于捕获信号，可指定信号处理的方式，函数声明如下：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void (*signal(int sig, void (*func)(int)))(int);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<div class="note "><p>第一个参数 sig 指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。<br>第二个参数描述了与信号关联的动作，下面将会对这三个参数进行讲解。</p>
</div>

<p>当程序收到信号的进程对各种信号有不同的处理方法。处理方法可以分为三类：<br>    1. 默认处理：对信号进行该信号的系统默认处理，第二参数为 SIG_DFL。<br>    2. 忽略信号：忽略该信号，第二参数为 SIG_IGN。<br>    3. Function handler：指定处理函数，由该函数来处理，第二参数为 函数指针 。<br>若signal函数中第二参数（函数指针）中通过 raise发出与signal函数对应信号类型相同的信号。程序将在signal函数这成为死循环，自己发信号，自己捕获，进程暂停。</p>
<h3 id="2-1默认处理-SIG-DFL"><a href="#2-1默认处理-SIG-DFL" class="headerlink" title="2.1默认处理-SIG_DFL"></a>2.1默认处理-SIG_DFL</h3><p>SIG_DFL 对信号进行该信号的系统默认处理。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;csignal&gt;
#include &lt;thread&gt;

using namespace std;
int main() {
    
    signal(SIGINT, SIG_DFL);
    while(1){
        std::this_thread::sleep_for (std::chrono::seconds(1));
        std::cout &lt;&lt; "hello world!" &lt;&lt; endl;
    }
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该程序包含一个死循环，循环内以一秒为间隔 打印语句。<br>SIGINT信号代表由InterruptKey产生，通常是CTRL +C 。执行上述代码时，按下CTRL + C 后程序退出。</p>
<h3 id="2-2忽略信号-SIG-IGN"><a href="#2-2忽略信号-SIG-IGN" class="headerlink" title="2.2忽略信号-SIG_IGN"></a>2.2忽略信号-SIG_IGN</h3><p>SIG_IGN 表示忽略该信号。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;csignal&gt;
#include &lt;thread&gt;

using namespace std;
int main() {
    
    signal(SIGINT, SIG_IGN);
    while(1){
        std::this_thread::sleep_for (std::chrono::seconds(1));
        std::cout &lt;&lt; "hello world!" &lt;&lt; endl;
    }
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该程序包含一个死循环，循环内以一秒为间隔 打印语句。<br>SIGINT信号代表由InterruptKey产生，通常是CTRL +C 。执行上述代码时，按下CTRL + C 后程序没有反应。<br>如果我们想结束该程序可以按下CTRL +\，CTRL +\ 组合键会产生SIGQUIT信号，此信号并没有被忽略。</p>
<h3 id="2-3自定义函数"><a href="#2-3自定义函数" class="headerlink" title="2.3自定义函数"></a>2.3自定义函数</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void (*signal(int sig, void (*func)(int)))(int);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第二参数为 函数指针 ：当signal函数捕获信号后，通过指定函数进行处理。<br>此函数必须在 signal() 被调用前申明。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;csignal&gt;
#include &lt;thread&gt;

using namespace std;

using namespace std;
void signalHandler( int signum ) {
    std::cout &lt;&lt; "我来处理！" &lt;&lt; std::endl;
    std::this_thread::sleep_for (std::chrono::seconds(5));
}

int main() {
    
    signal(SIGINT, signalHandler);			// 捕获 SIGINT
    std::this_thread::sleep_for (std::chrono::seconds(2));
        
    std::cout &lt;&lt; "程序结束." &lt;&lt; endl;
    
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该程序声明了信号类型为 SIGINT 的signal函数，用于捕获 SIGINT信号。SIGINT信号代表由InterruptKey产生，通常是CTRL +C<br>当什么都不做时，程序会正常运行到结束。<br>如果在程序结束前按下CTRL +C ，函数捕获SIGINT信号，进入signalHandler函数，mian函数阻塞，直至signalHandler函数运行结束，mian函数打印后程序结束。</p>
<h2 id="3-函数raise"><a href="#3-函数raise" class="headerlink" title="3.函数raise"></a>3.函数raise</h2><p>函数raise 产生一个信号sig，并向当前正在执行的程序发送信号sig，其声明如下：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int raise (int sig);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重点： 值得注意的是，raise发出的信号，可被当前进程中同类型型号的signal函数捕获。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;csignal&gt;
#include &lt;thread&gt;

using namespace std;
void signalHandler( int signum ) {
    std::cout &lt;&lt; "我来处理！" &lt;&lt; std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(2));
    
    raise(SIGQUIT);                     // 3. 退出程序
}

int main() {
    
    signal(SIGINT, signalHandler);      // 1. signal函数，用于捕获 SIGINT 信号
    int i=0;

    while(++i){
        std::cout &lt;&lt; "keep run...." &lt;&lt; i &lt;&lt; std::endl;
        if( i == 3 )
            raise(SIGINT);              // 2. raise, 发送SIGINT 信号
    }
    
    return 0;
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看出当signal捕获信号后，main函数对应的程序暂停，不再打印。<br>本测试中signalHandler()发出 SIGQUIT信号，进程结束。</p>
<hr>
<p>参考博客<a href="https://blog.csdn.net/u013271656/article/details/114537411">https://blog.csdn.net/u013271656/article/details/114537411</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-startup</title>
    <url>/2023/02/07/hexo-startup/</url>
    <content><![CDATA[<h1 id="Hexo入门"><a href="#Hexo入门" class="headerlink" title="Hexo入门"></a>Hexo入门</h1><blockquote>
<p>简介<br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
</blockquote>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Cartographer源码阅读</title>
    <url>/2023/08/09/Cartographer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h4 id="（一）PoseGraph2D类"><a href="#（一）PoseGraph2D类" class="headerlink" title="（一）PoseGraph2D类"></a>（一）PoseGraph2D类</h4><h5 id="位姿图Node的插入"><a href="#位姿图Node的插入" class="headerlink" title="位姿图Node的插入"></a>位姿图Node的插入</h5><p>在<code>GlobalTrajectoryBuilder</code>类中调用<code>AddSensorData()</code>接口更新激光点云数据时，会调用<code>PoseGraph2D</code>类的<code>AddNode()</code>接口。<br><code>AddNode()</code>函数中会调用<code>AppendNode()</code>函数，然后调用<code>ComputeConstraintsForNode()</code>函数计算约束。</p>
<h5 id="约束计算和回环检测"><a href="#约束计算和回环检测" class="headerlink" title="约束计算和回环检测"></a>约束计算和回环检测</h5><h5 id="工作流处理机制"><a href="#工作流处理机制" class="headerlink" title="工作流处理机制"></a>工作流处理机制</h5><p><code>AddWorkItem()</code></p>
<p><code>HandleWorkQueue()</code></p>
<p><code>DrainWorkQueue()</code></p>
<h4 id="（二）MapBuilder类"><a href="#（二）MapBuilder类" class="headerlink" title="（二）MapBuilder类"></a>（二）MapBuilder类</h4><h5 id="删除submap机制"><a href="#删除submap机制" class="headerlink" title="删除submap机制"></a>删除submap机制</h5><p>共包含两种trim的机制，第一种是<code>OverlappingSubmapsTrimmer2D</code>类型的，只用在2D SLAM中；第二种是<code>PureLocalizationTrimmer</code>，在2D和3D中都可以用。<br>在<code>MapBuilder</code>类中调用<code>AddTrajectoryBuilder()</code>接口时，会调用<code>PoseGraph2D</code>类的<code>AddTrimmer()</code>接口，向pose_graph中配置<code>PoseGraphTrimmer</code>类。<br>在<code>PoseGraph2D</code>类调用<code>HandleWorkQueue()</code>函数处理工作流的过程中，会调用<code>Trim()</code>函数执行submap的筛选和删除操作。<br><code>MapBuilder</code>类中一般会向pose_graph中配置<code>PureLocalizationTrimmer</code>类，在纯定位的情况下会只保留3张submap，每次有新的submap进来的时候会删除最早的一张submap，具体实现细节在<code>PureLocalizationTrimmer::Trim()</code>函数中。<br><code>OverlappingSubmapsTrimmer2D</code>类</p>
<h4 id="（三）LocalTrajectoryBuilder2D类"><a href="#（三）LocalTrajectoryBuilder2D类" class="headerlink" title="（三）LocalTrajectoryBuilder2D类"></a>（三）LocalTrajectoryBuilder2D类</h4><h5 id="管理外推器PoseExtrapolator"><a href="#管理外推器PoseExtrapolator" class="headerlink" title="管理外推器PoseExtrapolator"></a>管理外推器PoseExtrapolator</h5><p><code>InitializeExtrapolator()</code>函数：初始化<code>extrapolator_</code>指针，然后调用<code>PoseExtrapolator::AddPose()</code>函数添加初始位姿。<br><code>AddImuData()</code>函数：调用<code>PoseExtrapolator::AddImuData()</code>添加IMU数据,初次调用时会首先使用<code>InitializeExtrapolator()</code>函数初始化外推器.<br><code>AddOdometryData()</code>函数：调用<code>PoseExtrapolator::AddOdometryData()</code>添加轮式里程计数据。  </p>
<h5 id="激光点云数据处理"><a href="#激光点云数据处理" class="headerlink" title="激光点云数据处理"></a>激光点云数据处理</h5><p>通过<code>AddRangeData()</code>接口传入激光点云数据，</p>
<p>调用<code>AddAccumulatedRangeData()</code>函数</p>
<p>在<code>AddAccumulatedRangeData()</code>函数中，调用<code>sensor::AdaptiveVoxelFilter()</code>函数对点云数据进行自适应体素滤波，然后调用<code>ScanMatch()</code>函数得到点云匹配位姿，然后调用<code>PoseExtrapolator::AddPose()</code>函数将匹配位姿添加到外推器，然后调用<code>InsertIntoSubmap()</code>函数将激光点云数据插入到submap</p>
<h5 id="激光点云去畸变"><a href="#激光点云去畸变" class="headerlink" title="激光点云去畸变"></a>激光点云去畸变</h5><h5 id="ScanMatch帧间匹配"><a href="#ScanMatch帧间匹配" class="headerlink" title="ScanMatch帧间匹配"></a>ScanMatch帧间匹配</h5><h5 id="Submap的生成及数据插入"><a href="#Submap的生成及数据插入" class="headerlink" title="Submap的生成及数据插入"></a>Submap的生成及数据插入</h5><p>通过调用<code>InsertIntoSubmap()</code>函数将激光点云数据插入到submap中，其中首先要调用<code>MotionFilter</code>类的<code>IsSimilar()</code>函数控制插入的激光点云帧数稀疏化</p>
<h4 id="（四）GlobalTrajectoryBuilder类"><a href="#（四）GlobalTrajectoryBuilder类" class="headerlink" title="（四）GlobalTrajectoryBuilder类"></a>（四）GlobalTrajectoryBuilder类</h4><h4 id="（五）PoseExtrapolator类，外推器"><a href="#（五）PoseExtrapolator类，外推器" class="headerlink" title="（五）PoseExtrapolator类，外推器"></a>（五）PoseExtrapolator类，外推器</h4><p>位姿外插器的主要作用是利用保存了一段时间的位姿计算角速度和线速度，并利用线速度和角速度进行位姿插值。</p>
<p><code>AddPose()</code></p>
<p><code>AddImuData()</code></p>
<p><code>AddOdometryData()</code></p>
<p><code>ExtrapolatePose()</code></p>
<p><code>ExtrapolateTranslation()</code></p>
<p><code>ExtrapolateRotation()</code></p>
<p><code>AdvanceImuTracker()</code></p>
<h4 id="（六）MotionFilter类，前端Node稀疏化"><a href="#（六）MotionFilter类，前端Node稀疏化" class="headerlink" title="（六）MotionFilter类，前端Node稀疏化"></a>（六）MotionFilter类，前端Node稀疏化</h4><p>在<code>trajectory_builder_2d.cc</code>的<code>LocalTrajectoryBuilder2D::AddAccumulatedRangeData()</code>函数中执行稀疏化任务，即在<code>AddAccumulatedRangeData()</code>函数中调用<code>InsertIntoSubmap()</code>函数，在<code>InsertIntoSubmap()</code>函数内调用<code>MotionFilter::IsSimilar()</code>函数进行稀疏化，如果被判断和上一帧的时间及位姿变化较小，则认为该帧不是Node，不放入后端。</p>
]]></content>
  </entry>
</search>
